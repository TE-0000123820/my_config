# for
snippet for "for ${2:i} in ${1:array[@]}; do \n ${3:echo $i} \n done"
for ${2:i} in ${1:array[@]}; do
    ${3:echo $i}
done
endsnippet

# forc
snippet forc "for ((i=0; i < ${1:100}; i++)); do"
for ((i=0; i < ${1:100}; i++)); do
    ${2:echo $i}
done
endsnippet

# bash check
snippet bashcheck "#!bin/bash; set -eu -o pipefail"
#!/bin/bash
set -eu -o pipefail

endsnippet

snippet tr "trap 'echo done' INT PIPE TERM EXIT"
trap ${1:'echo done'} INT PIPE TERM EXIT
endsnippet

snippet ifeqn "if [ 0 -eq 1 ]; then"
if [ ${1:0} -eq ${2:1} ]; then
endsnippet

snippet ifeqs "if [ '' = '' ]; then"
if [ ${1:""} = ${2:""} ]; then
endsnippet

snippet ifcmd "if cmd ; then"
if ${1:cmd} ; then
endsnippet

snippet ifre "if [[ 'aaabbc' =~ 'b+c$' ]]; then"
if [[ "aaabbc" =~ "b+c$" ]]; then
endsnippet

snippet ifre2 "if [[ ${foo} =~ ^[a-z]+([0-9]+).*$ ]]; then echo ${BASH_REMATCH[1]}; fi"
if [[ ${foo} =~ ^[a-z]+([0-9]+).*$ ]]; then
  echo ${BASH_REMATCH[1]}
fi
endsnippet

snippet func "func () { ls }"
${1:func} () {
    ${2:ls}
}
endsnippet

snippet heredoc "cat << EOF|  inline,EOF,input,redirect"
cat << EOF
aaa
bbb
EOF
endsnippet

snippet ld "export LD_LIBRARY_PATH="
export LD_LIBRARY_PATH=
endsnippet

snippet export_amd_log_level "export AMD_LOG_LEVEL=4"
export AMD_LOG_LEVEL=4
endsnippet

snippet export_miopen_enable_logging "export MIOPEN_ENABLE_LOGGING=1"
export MIOPEN_ENABLE_LOGGING=1
endsnippet

snippet export_miopen_log_level "export MIOPEN_LOG_LEVEL=6"
export MIOPEN_LOG_LEVEL=6
endsnippet

snippet export_gpu_flush_on_execution "export GPU_FLUSH_ON_EXECUTION=1,amd,rocm"
export GPU_FLUSH_ON_EXECUTION=1
endsnippet

snippet fileexists "if,file,exists,then"
if [[ -f file ]] ; then
	echo "exists"
fi
endsnippet

snippet gitfetchbranch "git pull origin <Remote-branch-name>:<Local-branch-name>`,remote,fetch,branch,git"
git pull origin ${1:remote}:${2:local}
endsnippet

snippet gitsyncforkallbranch "git,sync,frok,branch,all,pull,fetch"
#!/bin/bash
set -eu -o pipefail

REMOTE_SRC=git@github.com:BoostAnywhere/rocm_test_env.git
REMOTE_DST=git@github.sie.sony.com:SIE-Private/rdc-cronos-rocm-test-env.git
PREFIX=fork/
GIT_DIR=
PUSH_OPTIONS=""
#PUSH_OPTIONS=+"--prune --push-option=ci.skip"
#PUSH_OPTIONS=+"--prune"

# Initialize bare repository in temporary $GIT_DIR
if test -z "$GIT_DIR"; then
    GIT_DIR=$(mktemp -d)
    trap "rm -rf $GIT_DIR" EXIT
fi

export GIT_DIR

git init --bare

# Fetch all branches/tags from src repository
git fetch $REMOTE_SRC +refs/heads/*:refs/src/heads/* --prune 
git fetch $REMOTE_SRC +refs/tags/*:refs/src/tags/* --prune

# Fetch $PREFIX-ed branches/tags from dst to local src
#git fetch $REMOTE_DST +refs/heads/${PREFIX}*:refs/src/heads/${PREFIX}* --no-tags
#git fetch $REMOTE_DST +refs/tags/${PREFIX}*:refs/src/tags/${PREFIX}* --no-tags

# Push all branches/tags from local src to dst repository
git push $REMOTE_DST +refs/src/heads/*:refs/heads/* $PUSH_OPTIONS
git push $REMOTE_DST +refs/src/tags/*:refs/tags/* $PUSH_OPTIONS
endsnippet

snippet pipinstallpylsp "pip,install,pylsp,python,lsp,server,pip install python-lsp-server"
pip install python-lsp-server
endsnippet
