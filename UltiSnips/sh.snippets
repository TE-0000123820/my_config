# for
snippet for "for ${2:i} in ${1:array[@]}; do \n ${3:echo $i} \n done"
for ${2:i} in ${1:array[@]}; do
    ${3:echo $i}
done
endsnippet

# forc
snippet forc "for ((i=0; i < ${1:100}; i++)); do"
for ((i=0; i < ${1:100}; i++)); do
    ${2:echo $i}
done
endsnippet

# bash check
snippet bashcheck "if [ ! `readlink /proc/$$/exe | grep bash` ] ; then echo 'ERROR: use bash' ; exit 1; fi"
if [ ! \`readlink /proc/$$/exe | grep bash\` ] ; then echo "ERROR: use bash" ; exit 1; fi
set -eu -o pipefail
endsnippet

snippet tr "trap 'echo done' INT PIPE TERM EXIT"
trap ${1:'echo done'} INT PIPE TERM EXIT
endsnippet

snippet ifeqn "if [ 0 -eq 1 ]; then"
if [ ${1:0} -eq ${2:1} ]; then
endsnippet

snippet ifeqs "if [ '' = '' ]; then"
if [ ${1:""} = ${2:""} ]; then
endsnippet

snippet ifcmd "if cmd ; then"
if ${1:cmd} ; then
endsnippet

snippet ifre "if [[ 'aaabbc' =~ 'b+c$' ]]; then"
if [[ "aaabbc" =~ "b+c$" ]]; then
endsnippet

snippet ifre2 "if [[ ${foo} =~ ^[a-z]+([0-9]+).*$ ]]; then echo ${BASH_REMATCH[1]}; fi"
if [[ ${foo} =~ ^[a-z]+([0-9]+).*$ ]]; then
  echo ${BASH_REMATCH[1]}
fi
endsnippet
