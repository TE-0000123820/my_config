snippet isub "import subprocess"
import subprocess
endsnippet

snippet ia "import argparse"
import argparse
endsnippet

snippet io "import os"
import os
endsnippet

snippet is "import sys"
import sys
endsnippet

snippet pr "print(f'')" w
print(f'$1')
endsnippet

snippet pro "print('')" w
print('$1')
endsnippet

snippet pf "%f" w
%f
endsnippet

snippet pd "%d" w
%d
endsnippet

snippet ps "%s" w
%s
endsnippet

snippet ap "parser = argparse.ArgumentParser()"
parser = argparse.ArgumentParser()
parser.add_argument('input_file', type=str, nargs=1, help='Input filename.')
parser.add_argument('--verbose', action='store_const', const=True, default=False, help='specify verbose mode.')
parser.add_argument('-D', '--dir', required=False, help='Output directory.')
args = parser.parse_args()
endsnippet

snippet res "m = re.search(r'asdf', l)"
m = re.search(r'asdf', l)
word = m.group(1)
endsnippet

snippet ifm "if __name__ == '__main__':"
if __name__ == "__main__":
    main()
endsnippet

snippet inp "import numpy as np"
import numpy as np
endsnippet

snippet ipil "from PIL import Image, ImageFilter"
from PIL import Image, ImageFilter
endsnippet

snippet npm "array = np.maximum(array, 0)"
array = np.maximum(array, 0)
endsnippet

snippet npff "array = np.fromfile(args.input_file[0], np.int8)"
array = np.fromfile(args.input_file[0], np.int8)
endsnippet

snippet astype "a_float = a.astype(np.float32)"
a_float = a.astype(np.float32)
endsnippet

snippet makedirs "os.makedirs(path, exist_ok=True)"
os.makedirs(${1:path}, exist_ok=True)
endsnippet

snippet textwrap "import textwrap ; string = textwrap.dedent('''asdf''')"
import textwrap
string = textwrap.dedent('''
${1:asdf}
''')
endsnippet

snippet abs "os.path.abspath(__file__)" w
os.path.abspath(${1:__file__})
endsnippet

snippet absi "impot os ; os.path.abspath(__file__)" w
impot os
os.path.abspath(${1:__file__})
endsnippet

snippet signalhandle "import signal; def handler(_): assert 0 signal.signal(signal.SIGTERM, handler) signal.signal(signal.SIGINT,  handler)" w
import signal
def handler(_):
    assert 0
signal.signal(signal.SIGTERM, handler)
signal.signal(signal.SIGINT,  handler)
endsnippet

snippet lambda "lambda n: n * 2" w
lambda n: n * 2
endsnippet

snippet astliteral "ast.literal_eval()" w
ast.literal_eval(${1:a})
endsnippet

snippet nprand "numpy,np.random.rand()" w
np.random.rand(${1:100})
endsnippet
