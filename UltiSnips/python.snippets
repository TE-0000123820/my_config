snippet isub "import subprocess"
import subprocess
endsnippet

snippet ia "import argparse"
import argparse
endsnippet

snippet io "import os"
import os
endsnippet

snippet is "import sys"
import sys
endsnippet

snippet pr "print(f'')" w
print(f'$1')
endsnippet

snippet pro "print('')" w
print('$1')
endsnippet

# Black: \u001b[30m
# Red: \u001b[31m
# Green: \u001b[32m
# Yellow: \u001b[33m
# Blue: \u001b[34m
# Magenta: \u001b[35m
# Cyan: \u001b[36m
snippet prcr "print red color" w
print("\x1b[1m\x1b[31m", end=""); # red
print("\x1b[0m", end="");
endsnippet

snippet prcg "print green color" w
print("\x1b[1m\x1b[32m", end=""); # green
print("\x1b[0m", end="");
endsnippet

snippet prcy "print yellow color" w
print("\x1b[1m\x1b[33m", end=""); # yellow
print("\x1b[0m", end="");
endsnippet

snippet prcb "print blue color" w
print("\x1b[1m\x1b[34m", end=""); # blue
print("\x1b[0m", end="");
endsnippet

snippet prcm "print magenta color" w
print("\x1b[1m\x1b[35m", end=""); # magenta
print("\x1b[0m", end="");
endsnippet

snippet prcc "print cyan color" w
print("\x1b[1m\x1b[35m", end=""); # cyan
print("\x1b[0m", end="");
endsnippet

snippet pf "%f" w
%f
endsnippet

snippet pd "%d" w
%d
endsnippet

snippet ps "%s" w
%s
endsnippet

snippet ap "parser = argparse.ArgumentParser()"
parser = argparse.ArgumentParser()
parser.add_argument('input_file', type=str, nargs=1, help='Input filename.')
parser.add_argument('--verbose', action='store_const', const=True, default=False, help='specify verbose mode.')
parser.add_argument('-D', '--dir', required=False, help='Output directory.')
args = parser.parse_args()
endsnippet

snippet res "m = re.search(r'asdf', l)"
m = re.search(r'asdf', l)
word = m.group(1)
endsnippet

snippet ifm "if __name__ == '__main__':"
if __name__ == "__main__":
    main()
endsnippet

snippet inp "import numpy as np"
import numpy as np
endsnippet

snippet ipil "from PIL import Image, ImageFilter"
from PIL import Image, ImageFilter
endsnippet

snippet npm "array = np.maximum(array, 0)"
array = np.maximum(array, 0)
endsnippet

snippet npff "array = np.fromfile(args.input_file[0], np.int8)"
array = np.fromfile(args.input_file[0], np.int8)
endsnippet

snippet astype "a_float = a.astype(np.float32)"
a_float = a.astype(np.float32)
endsnippet

snippet makedirs "os.makedirs(path, exist_ok=True)"
os.makedirs(${1:path}, exist_ok=True)
endsnippet

snippet textwrap "import textwrap ; string = textwrap.dedent('''asdf''')"
import textwrap
string = textwrap.dedent('''
${1:asdf}
''')
endsnippet

snippet abs "os.path.abspath(__file__)" w
os.path.abspath(${1:__file__})
endsnippet

snippet absi "impot os ; os.path.abspath(__file__)" w
impot os
os.path.abspath(${1:__file__})
endsnippet

snippet signalhandle "import signal; def handler(_): assert 0 signal.signal(signal.SIGTERM, handler) signal.signal(signal.SIGINT,  handler)" w
import signal
def handler(_):
    assert 0
signal.signal(signal.SIGTERM, handler)
signal.signal(signal.SIGINT,  handler)
endsnippet

snippet lambda "lambda n: n * 2" w
lambda n: n * 2
endsnippet

snippet astliteral "ast.literal_eval()" w
ast.literal_eval(${1:a})
endsnippet

snippet nprand "numpy,np.random.rand()" w
np.random.rand(${1:100})
endsnippet

snippet pdbsig "pdb,signal,trap,trace" w
import signal
def handle_pdb(sig, frame):
    import pdb
    pdb.Pdb().set_trace(frame)
signal.signal(signal.SIGUSR1, handle_pdb)
endsnippet

snippet jsonload "json,load,file,open" w
with open('a.json') as f:
    df = json.load(f)
endsnippet

snippet hbarmatplotlib "hbar,matplotlib,graph,chart,draw" w
import matplotlib.pyplot as plt
import pandas as pd

data = {'Quantity': [320,450,300,120,280],
        'Price': [800,250,1200,150,300]
       }
df = pd.DataFrame(data,columns=['Quantity','Price'], index = ['Computer','Monitor','Laptop','Printer','Tablet'])

df.plot.barh()

plt.title('Store Inventory')
plt.ylabel('Product')
plt.xlabel('Quantity')
plt.show()
endsnippet

snippet sysexit "import sys; sys.exit(0)" w
import sys; sys.exit(0)
endsnippet

snippet matplotlibtileimage "matplotlib,tile,image,plot" w
import matplotlib.pyplot as plt
plt.figure(figsize=(40, 40))
nrow = 10
ncol = 10
for i in range(nrow*ncol):
	plt.subplot(nrow, ncol, i + 1)
	plt.imshow(img)
plt.axis("off")
plt.savefig("out_pt.png")
endsnippet
